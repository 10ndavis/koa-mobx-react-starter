{"version":3,"sources":["server.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;;;;;AAEA,IAAM,MAAM,mBAAZ;;AAEA;AACA,IAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,UAAQ,GAAR,CAAY,uCAAZ;;AAEA,MAAM,iBAAiB,6BAAU,EAAE,KAAK,EAAE,MAAM,KAAR,EAAP,EAAV,CAAvB;;AAEA,MAAM,UAAU,uBAAQ,cAAR,CAAhB;;AAEA,MAAI,GAAJ,CAAQ,yCAAc,OAAd,EAAuB;AAC7B,YAAQ,IADqB;AAE7B,gBAAY,eAAe,MAAf,CAAsB;AAFL,GAAvB,CAAR;;AAKA,MAAI,GAAJ,CAAQ,yCAAc,OAAd,EAAuB,EAAvB,CAAR;AACD,CAbD,MAaO;AACL,UAAQ,GAAR,CAAY,wBAAZ;AACD;;AAED;AACA,IAAI,GAAJ;AAAA,uDAAQ,iBAAM,GAAN,EAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,iBADC,GACO,IAAI,IAAJ,EADP;AAAA;AAAA,mBAED,MAFC;;AAAA;AAGD,cAHC,GAGI,IAAI,IAAJ,KAAa,KAHjB;;;AAKP,oBAAQ,GAAR,CAAe,IAAI,MAAnB,SAA6B,IAAI,GAAjC,WAA0C,EAA1C;;AALO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA;;AAQA,IAAI,GAAJ;AAAA,wDAAQ,kBAAM,GAAN,EAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA,MAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIN,gBAAI,IAAJ,GAAW,EAAE,SAAS,aAAI,OAAf,EAAX;AACA,gBAAI,MAAJ,GAAa,aAAI,MAAJ,IAAc,GAA3B;;AALM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA;;AASA,IAAM,MAAM,qBAAQ;AAClB,YAAU;AADQ,CAAR,CAAZ;;AAIA,IAAI,GAAJ,CAAQ,GAAR;;AAEA,IAAI,GAAJ;AAAA,wDAAQ,kBAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AACP,gBAAI,MAAJ,CAAW,MAAX,EAAmB;AAClB,4BAAc;AACb,sBAAM;AADO;AADI,aAAnB;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AAAA;AAAA;AAAA;AAAA;;AAQA,IAAI,MAAJ,CAAW,IAAX;AACA,QAAQ,GAAR,CAAY,+BAAZ","file":"server-compiled.js","sourcesContent":["import 'babel-polyfill';\r\nimport Koa from 'koa';\r\nimport Pug from 'koa-pug';\r\n\r\nimport webpack from 'webpack';\r\nimport { devMiddleware, hotMiddleware} from 'koa-webpack-middleware';\r\nimport devConfig from '../webpack.config.dev';\r\n\r\nconst app = new Koa();\r\n\r\n// DEVELOPMENT STUFF\r\nif (process.env.NODE_ENV === 'development') {\r\n  console.log(\"Development environment, starting HMR\");\r\n\r\n  const devConfigBuilt = devConfig({ env: { prod: false } });\r\n\r\n  const compile = webpack(devConfigBuilt);\r\n\r\n  app.use(devMiddleware(compile, {\r\n    noInfo: true,\r\n    publicPath: devConfigBuilt.output.publicPath,\r\n  }));\r\n\r\n  app.use(hotMiddleware(compile, {}));\r\n} else {\r\n  console.log(\"Production environment\");\r\n}\r\n\r\n// basic method for measuring request lengths\r\napp.use(async(ctx, next) => {\r\n\tconst start = new Date();\r\n\tawait next();\r\n\tconst ms = new Date() - start;\r\n\r\n\tconsole.log(`${ctx.method} ${ctx.url} - ${ms}`);\r\n});\r\n\r\napp.use(async(ctx, next) => {\r\n\ttry {\r\n\t\tawait next();\r\n\t} catch (err) {\r\n\t\tctx.body = { message: err.message };\r\n\t\tctx.status = err.status || 500;\r\n\t}\r\n});\r\n\r\nconst pug = new Pug({\r\n  viewPath: './server/views',\r\n});\r\n\r\npug.use(app);\r\n\r\napp.use(async ctx => {\r\n\tctx.render('base', {\r\n\t\tinitialState: {\r\n\t\t\twhat: \"what\",\r\n    },\r\n  });\r\n});\r\n\r\napp.listen(3000);\r\nconsole.log('Server listening on port 3000');\r\n"]}